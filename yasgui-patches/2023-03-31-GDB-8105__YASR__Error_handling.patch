Subject: [PATCH] GDB-8105: YASR: Error handling
---
Index: Yasgui/packages/yasgui/src/Tab.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Yasgui/packages/yasgui/src/Tab.ts b/Yasgui/packages/yasgui/src/Tab.ts
--- a/Yasgui/packages/yasgui/src/Tab.ts	(revision 4be91fa274df2de1a972048707bbc88064b14b19)
+++ b/Yasgui/packages/yasgui/src/Tab.ts	(revision 85432746b77e20f963b380d12f7bf3a7de3777d8)
@@ -141,34 +141,34 @@
     this.yasgui.selectTabId(this.persistentJson.id);
   }
   public close(confirm = true) {
-      const closeTab = () => {
-          if (this.yasqe) this.yasqe.abortQuery();
-          if (this.yasgui.getTab() === this) {
-              //it's the active tab
-              //first select other tab
-              const tabs = this.yasgui.persistentConfig.getTabs();
-              const i = tabs.indexOf(this.persistentJson.id);
-              if (i > -1) {
-                  this.yasgui.selectTabId(tabs[i === tabs.length - 1 ? i - 1 : i + 1]);
-              }
-          }
-          this.yasgui._removePanel(this.rootEl);
-          this.yasgui.persistentConfig.deleteTab(this.persistentJson.id);
-          this.yasgui.emit("tabClose", this.yasgui, this);
-          this.emit("close", this);
-          this.yasgui.tabElements.get(this.persistentJson.id).delete();
-          delete this.yasgui._tabs[this.persistentJson.id];
-      };
-      if (confirm) {
-          new CloseTabConfirmation(
-              this.yasgui.config.translationService,
-              this.yasgui.config.translationService.translate('yasgui.tab_list.close_tab.confirmation.title'),
-              this.yasgui.config.translationService.translate('yasgui.tab_list.close_tab.confirmation.message'),
-              closeTab
-          ).open();
-      } else {
-          closeTab();
-      }
+    const closeTab = () => {
+      if (this.yasqe) this.yasqe.abortQuery();
+      if (this.yasgui.getTab() === this) {
+        //it's the active tab
+        //first select other tab
+        const tabs = this.yasgui.persistentConfig.getTabs();
+        const i = tabs.indexOf(this.persistentJson.id);
+        if (i > -1) {
+          this.yasgui.selectTabId(tabs[i === tabs.length - 1 ? i - 1 : i + 1]);
+        }
+      }
+      this.yasgui._removePanel(this.rootEl);
+      this.yasgui.persistentConfig.deleteTab(this.persistentJson.id);
+      this.yasgui.emit("tabClose", this.yasgui, this);
+      this.emit("close", this);
+      this.yasgui.tabElements.get(this.persistentJson.id).delete();
+      delete this.yasgui._tabs[this.persistentJson.id];
+    };
+    if (confirm) {
+      new CloseTabConfirmation(
+        this.yasgui.config.translationService,
+        this.yasgui.config.translationService.translate("yasgui.tab_list.close_tab.confirmation.title"),
+        this.yasgui.config.translationService.translate("yasgui.tab_list.close_tab.confirmation.message"),
+        closeTab
+      ).open();
+    } else {
+      closeTab();
+    }
   }
   public getQuery() {
     if (!this.yasqe) {
@@ -506,13 +506,14 @@
     if (!this.yasr) throw new Error("Resultset visualizer not initialized. Cannot draw results");
     this.yasr.setResponse(response, duration, queryStartedTime, hasMorePages);
     if (!this.yasr.results) return;
+    const responseAsStoreObject = this.yasr.results.getAsStoreObject(this.yasgui.config.yasr.maxPersistentResponseSize);
     if (!this.yasr.results.hasError()) {
-      this.persistentJson.yasr.response = this.yasr.results.getAsStoreObject(
-        this.yasgui.config.yasr.maxPersistentResponseSize
-      );
+      this.persistentJson.yasr.response = responseAsStoreObject;
     } else {
-      // Don't persist if there is an error and remove the previous result
-      this.persistentJson.yasr.response = undefined;
+      if (responseAsStoreObject && responseAsStoreObject.error) {
+        responseAsStoreObject.error.text = responseAsStoreObject.error.text.replace(/^([^: ]+: )+/, "");
+      }
+      this.persistentJson.yasr.response = responseAsStoreObject;
     }
     this.emit("change", this, this.persistentJson);
   };
Index: Yasgui/packages/yasr/src/extended-yasr.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Yasgui/packages/yasr/src/extended-yasr.ts b/Yasgui/packages/yasr/src/extended-yasr.ts
--- a/Yasgui/packages/yasr/src/extended-yasr.ts	(revision 4be91fa274df2de1a972048707bbc88064b14b19)
+++ b/Yasgui/packages/yasr/src/extended-yasr.ts	(revision 85432746b77e20f963b380d12f7bf3a7de3777d8)
@@ -63,14 +63,16 @@
     }
   }
 
-  updatePluginSelectorNames() {
-    if (this.yasqe.isAskQuery()) {
-      // hides plugins buttons if "query" mode query had been executed.
+  draw() {
+    if (this.yasqe.isUpdateQuery() || this.yasqe.isAskQuery() || this.results?.hasError()) {
       this.hidePluginElementVisibility();
-      return;
-    }
-    // shows plugins buttons if "update" mode query had been executed.
-    this.showPluginElementVisibility();
+    } else {
+      this.showPluginElementVisibility();
+    }
+    super.draw();
+  }
+
+  updatePluginSelectorNames() {
     super.updatePluginSelectorNames();
     if (this.downloadAsElement) {
       this.updateDownloadAsElement(this.toDownloadAs(this.downloadAsElement));
@@ -305,6 +307,13 @@
 
   updateResponseInfo() {
     const responseInfoElement = this.getResponseInfoElement();
+
+    removeClass(responseInfoElement, "hidden");
+    if (this.results?.hasError()) {
+      addClass(responseInfoElement, "hidden");
+      return;
+    }
+
     const responseTime = this.results?.getResponseTime();
     const queryStartedTime = this.results?.getQueryStartedTime();
 
@@ -356,7 +365,7 @@
     );
   }
 
-  private getResultTimeMessage(responseTime: number, queryFinishedTime: number): string {
+  public getResultTimeMessage(responseTime: number, queryFinishedTime: number): string {
     const params = [
       {
         key: "seconds",
Index: Yasgui/packages/yasr/src/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Yasgui/packages/yasr/src/index.ts b/Yasgui/packages/yasr/src/index.ts
--- a/Yasgui/packages/yasr/src/index.ts	(revision 4be91fa274df2de1a972048707bbc88064b14b19)
+++ b/Yasgui/packages/yasr/src/index.ts	(revision 85432746b77e20f963b380d12f7bf3a7de3777d8)
@@ -48,7 +48,7 @@
   private selectedPlugin: string | undefined;
 
   protected readonly translationService: TranslationService;
-  protected readonly yasqe: Yasqe;
+  readonly yasqe: Yasqe;
 
   // Utils
   public utils = { addScript: addScript, addCSS: addCss, sanitize: sanitize };
@@ -186,7 +186,7 @@
   public draw() {
     this.updateHelpButton();
     this.updateResponseInfo();
-    if (!this.results || this.yasqe.isUpdateQuery()) return;
+    if (!this.results) return;
     this.updatePluginSelectorNames();
     const compatiblePlugins = this.getCompatiblePlugins();
     if (this.drawnPlugin && this.getSelectedPluginName() !== this.drawnPlugin) {
@@ -231,7 +231,7 @@
         (_e) => console.error
       );
     } else {
-      this.resultsEl.textContent = "cannot render result";
+      this.resultsEl.textContent = this.translationService.translate("yasr.plugin.no_compatible.message");
       this.updateExportHeaders();
       this.updatePluginSelectors(compatiblePlugins);
     }
@@ -471,6 +471,9 @@
   }
 
   updatePluginSelectorNames() {
+    if (!this.pluginSelectorsEl) {
+      return;
+    }
     const pluginOrder = this.config.pluginOrder;
     for (const pluginName of pluginOrder) {
       if (!this.config.plugins[pluginName] || !this.config.plugins[pluginName].enabled) {
@@ -684,9 +687,11 @@
 import Yasqe from "@triply/yasqe";
 import ExtendedBoolean from "./plugins/boolean/extended-boolean";
 import ExtendedResponse from "./plugins/response/extended-response";
+import ExtendedError from "./plugins/error/extended-error";
 
 Yasr.registerPlugin("extended_boolean", ExtendedBoolean as any);
-Yasr.registerPlugin("response", ExtendedResponse as any);
+Yasr.registerPlugin("extended_response", ExtendedResponse as any);
+Yasr.registerPlugin("extended_error", ExtendedError as any);
 Yasr.registerPlugin("error", YasrPluginError.default as any);
 Yasr.registerPlugin("extended_table", ExtendedTable as any);
 
Index: Yasgui/packages/yasr/src/plugins/error/extended-error.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Yasgui/packages/yasr/src/plugins/error/extended-error.ts b/Yasgui/packages/yasr/src/plugins/error/extended-error.ts
new file mode 100644
--- /dev/null	(revision 85432746b77e20f963b380d12f7bf3a7de3777d8)
+++ b/Yasgui/packages/yasr/src/plugins/error/extended-error.ts	(revision 85432746b77e20f963b380d12f7bf3a7de3777d8)
@@ -0,0 +1,42 @@
+import Error from "./index";
+import Parser from "../../parsers";
+
+export default class ExtendedError extends Error {
+  async draw() {
+    const error = this.yasr.results?.getError();
+    if (error) {
+      this.yasr.resultsEl.appendChild(this.createErrorElement(error));
+    }
+  }
+
+  private createErrorElement(error: Parser.ErrorSummary): HTMLDivElement {
+    const errorResponseElement = document.createElement("div");
+    errorResponseElement.className = "error-response-plugin";
+    errorResponseElement.innerHTML = this.getErrorMessage(error);
+    return errorResponseElement;
+  }
+
+  private getErrorMessage(error: Parser.ErrorSummary): string {
+    return `<div class="error-response-plugin-header">
+                    <div class="error-response-plugin-error-status">
+                        ${error.status ? error.status + ":" : ""} ${error.statusText}
+                    </div>
+                    <div class="error-response-plugin-error-time-message">
+                        ${this.getResultTimeMessage()}
+                    </div>
+                 </div>
+                 <div class="error-response-plugin-body">
+                    ${error.text || ""}
+                 </div>`;
+  }
+
+  private getResultTimeMessage(): string {
+    const responseTime = this.yasr.results?.getResponseTime();
+    const queryStartedTime = this.yasr.results?.getQueryStartedTime();
+    if (responseTime && queryStartedTime) {
+      const queryFinishedTime = queryStartedTime + responseTime;
+      return this.yasr.getResultTimeMessage(responseTime, queryFinishedTime);
+    }
+    return "";
+  }
+}
Index: Yasgui/packages/yasr/src/plugins/error/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Yasgui/packages/yasr/src/plugins/error/index.ts b/Yasgui/packages/yasr/src/plugins/error/index.ts
--- a/Yasgui/packages/yasr/src/plugins/error/index.ts	(revision 4be91fa274df2de1a972048707bbc88064b14b19)
+++ b/Yasgui/packages/yasr/src/plugins/error/index.ts	(revision 85432746b77e20f963b380d12f7bf3a7de3777d8)
@@ -2,15 +2,15 @@
  * Make sure not to include any deps from our main index file. That way, we can easily publish the publin as standalone build
  */
 import { Plugin } from "../";
-import Yasr from "../../";
 import { addClass } from "@triply/yasgui-utils";
 import { TranslationService } from "@triply/yasgui-utils";
+import { ExtendedYasr } from "../../extended-yasr";
 require("./index.scss");
 
 export default class Error implements Plugin<never> {
-  private yasr: Yasr;
+  protected yasr: ExtendedYasr;
   private readonly translationService: TranslationService;
-  constructor(yasr: Yasr) {
+  constructor(yasr: ExtendedYasr) {
     this.yasr = yasr;
     this.translationService = this.yasr.config.translationService;
   }
Index: Yasgui/packages/yasr/src/plugins/response/extended-response.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Yasgui/packages/yasr/src/plugins/response/extended-response.ts b/Yasgui/packages/yasr/src/plugins/response/extended-response.ts
--- a/Yasgui/packages/yasr/src/plugins/response/extended-response.ts	(revision 4be91fa274df2de1a972048707bbc88064b14b19)
+++ b/Yasgui/packages/yasr/src/plugins/response/extended-response.ts	(revision 85432746b77e20f963b380d12f7bf3a7de3777d8)
@@ -2,6 +2,16 @@
 import { addClass } from "@triply/yasgui-utils";
 
 export default class ExtendedResponse extends Response {
+  priority = 1;
+
+  canHandleResults() {
+    if (!this.yasr.results || !this.yasr.results.getOriginalResponseAsString || this.yasr.yasqe.isUpdateQuery()) {
+      return false;
+    }
+
+    return !this.yasr.results.hasError();
+  }
+
     // Function is overriden and download button is removed from the view because we already has one.
     showLess(setValue = true) {
         if (!this.cm) return;
