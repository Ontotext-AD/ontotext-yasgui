Subject: [PATCH] GDB-8438: YASR: Update error plugin
---
Index: Yasgui/packages/yasr/src/plugins/error/extended-error.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Yasgui/packages/yasr/src/plugins/error/extended-error.ts b/Yasgui/packages/yasr/src/plugins/error/extended-error.ts
--- a/Yasgui/packages/yasr/src/plugins/error/extended-error.ts	(revision 464434946fd416ccb698a7cbfc90c9e155ef98c0)
+++ b/Yasgui/packages/yasr/src/plugins/error/extended-error.ts	(revision 0ab32958e1d757c7f740303203886d90faec3784)
@@ -1,7 +1,11 @@
 import Error from "./index";
 import Parser from "../../parsers";
 
+const COUNT_OF_ERROR_CHARACTERS_TO_BE_SHOWN = 160;
 export default class ExtendedError extends Error {
+  private fullMessage = true;
+  private errorMessageElement: HTMLDivElement | undefined;
+
   async draw() {
     const error = this.yasr.results?.getError();
     if (error) {
@@ -11,50 +15,88 @@
 
   private createErrorElement(error: Parser.ErrorSummary): HTMLDivElement {
     const errorResponseElement = document.createElement("div");
-    errorResponseElement.className = "error-response-plugin";
-    errorResponseElement.innerHTML = this.getErrorMessage(error);
+    errorResponseElement.classList.add("error-response-plugin");
+    errorResponseElement.appendChild(this.getErrorStatusElement(error));
+    this.errorMessageElement = this.createErrorMessageElement();
+    const isErrorMessageBig = error?.text?.length > COUNT_OF_ERROR_CHARACTERS_TO_BE_SHOWN;
+    if (isErrorMessageBig) {
+      this.fullMessage = false;
+      errorResponseElement.appendChild(this.getShowMoreOrLessMessageElement());
+    }
+    errorResponseElement.appendChild(this.errorMessageElement);
+    this.updateErrorMessage();
     return errorResponseElement;
   }
 
-  private getErrorMessage(error: Parser.ErrorSummary): string {
-    const status = error.status;
-    const statusText = error.statusText
-      ? error.statusText
-      : this.yasr.translationService.translate("yasr.plugin.extended_error.default_status.message");
-    let errorBodyText;
+  private getShowMoreOrLessMessageElement(): HTMLAnchorElement {
+    const showFullErrorMessage = this.translationService.translate("yasr.plugin.error.show.full.message");
+    const showLessErrorMessage = this.translationService.translate("yasr.plugin.error.show.less.message");
+
+    const showMoreOrLessElement = document.createElement("a");
+    showMoreOrLessElement.classList.add("show-full-message-link");
+    showMoreOrLessElement.href = "#";
+    showMoreOrLessElement.innerText = showFullErrorMessage;
+
+    showMoreOrLessElement.onclick = () => {
+      this.fullMessage = !this.fullMessage;
+      if (this.fullMessage) {
+        showMoreOrLessElement.innerText = showLessErrorMessage;
+        showMoreOrLessElement.classList.add("show-less-message-link");
+        showMoreOrLessElement.classList.remove("show-full-message-link");
+      } else {
+        showMoreOrLessElement.classList.add("show-full-message-link");
+        showMoreOrLessElement.classList.remove("show-less-message-link");
+        showMoreOrLessElement.innerText = showFullErrorMessage;
+      }
+      this.updateErrorMessage();
+    };
+
+    return showMoreOrLessElement;
+  }
+
+  private createErrorMessageElement(): HTMLDivElement {
+    const errorMessageElement = document.createElement("div");
+    errorMessageElement.classList.add("error-response-plugin-body");
+    return errorMessageElement;
+  }
+
+  private updateErrorMessage(): void {
+    if (!this.errorMessageElement) {
+      return;
+    }
+
+    const error = this.yasr.results?.getError() || ({} as Parser.ErrorSummary);
+    let errorBodyText = "";
     if (error.text) {
       errorBodyText = error.text;
     } else if (error.messageLabelKey) {
       errorBodyText = this.yasr.translationService.translate(error.messageLabelKey, error.parameters);
     }
-    return this.createErrorMessageElement(status, statusText, errorBodyText);
-  }
 
-  private createErrorMessageElement(status: number | undefined, statusText = "", errorBodyText = "") {
-    let errorStatus = "";
-    if (status) {
-      errorStatus += status + ": ";
-    }
+    this.errorMessageElement.innerText = this.fullMessage
+      ? errorBodyText
+      : errorBodyText.substring(0, COUNT_OF_ERROR_CHARACTERS_TO_BE_SHOWN);
+  }
 
-    if (statusText) {
-      errorStatus += statusText;
-    } else {
-      errorStatus += this.yasr.translationService.translate("yasr.plugin.extended_error.default_status.message");
-    }
+  private getErrorStatusElement(error: Parser.ErrorSummary): HTMLDivElement {
+    const status = error.status ? error.status + ":" : "";
+    const statusText = error.statusText
+      ? error.statusText
+      : this.yasr.translationService.translate("yasr.plugin.extended_error.default_status.message");
+
+    const errorStatusElement = document.createElement("div");
+    errorStatusElement.classList.add("error-response-plugin-error-status");
+    errorStatusElement.innerText = `${status} ${statusText}`;
 
-    return (
-      '<div class="error-response-plugin-header">' +
-      '<div class="error-response-plugin-error-status">' +
-      errorStatus +
-      "</div>" +
-      '<div class="error-response-plugin-error-time-message">' +
-      this.getResultTimeMessage() +
-      "</div>" +
-      "</div>" +
-      '<div class="error-response-plugin-body">' +
-      errorBodyText +
-      "</div>"
-    );
+    const errorTimeMessageElement = document.createElement("div");
+    errorTimeMessageElement.classList.add("error-response-plugin-error-time-message");
+    errorTimeMessageElement.innerText = this.getResultTimeMessage();
+
+    const errorResponseHeaderElement = document.createElement("div");
+    errorResponseHeaderElement.classList.add("error-response-plugin-header");
+    errorResponseHeaderElement.appendChild(errorStatusElement);
+    errorResponseHeaderElement.appendChild(errorTimeMessageElement);
+    return errorResponseHeaderElement;
   }
 
   private getResultTimeMessage(): string {
Index: Yasgui/packages/yasr/src/plugins/error/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Yasgui/packages/yasr/src/plugins/error/index.ts b/Yasgui/packages/yasr/src/plugins/error/index.ts
--- a/Yasgui/packages/yasr/src/plugins/error/index.ts	(revision 464434946fd416ccb698a7cbfc90c9e155ef98c0)
+++ b/Yasgui/packages/yasr/src/plugins/error/index.ts	(revision 0ab32958e1d757c7f740303203886d90faec3784)
@@ -9,7 +9,7 @@
 
 export default class Error implements Plugin<never> {
   protected yasr: ExtendedYasr;
-  private readonly translationService: TranslationService;
+  protected readonly translationService: TranslationService;
   constructor(yasr: ExtendedYasr) {
     this.yasr = yasr;
     this.translationService = this.yasr.config.translationService;
