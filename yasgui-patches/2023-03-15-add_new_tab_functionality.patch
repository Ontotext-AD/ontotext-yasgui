Subject: [PATCH] Extends YASGUY with new functionality: open a new tab, open the next tab, open the previous tab and close other tabs.
---
Index: Yasgui/packages/yasgui/src/Tab.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Yasgui/packages/yasgui/src/Tab.ts b/Yasgui/packages/yasgui/src/Tab.ts
--- a/Yasgui/packages/yasgui/src/Tab.ts	(revision b3422210856f03bf3959752efe335b1ee69a4347)
+++ b/Yasgui/packages/yasgui/src/Tab.ts	(revision b21a32fbd0e38bda84e15fb38c5f07981b944bd9)
@@ -51,6 +51,10 @@
   on(event: "autocompletionClose", listener: (tab: Tab) => void): this;
   emit(event: "autocompletionClose", tab: Tab): boolean;
   emit(event: "yasqeReady", tab: Tab, yasqe: Yasqe | undefined): boolean;
+  emit(event: "openNewTab", tab: Tab): void;
+  emit(event: "openNextTab", tab: Tab): void;
+  emit(event: "openPreviousTab", tab: Tab): void;
+  emit(event: "closeOtherTabs", tab: Tab): void;
 }
 export class Tab extends EventEmitter {
   private persistentJson: PersistedJson;
@@ -378,6 +382,10 @@
 
     this.yasqe.on("queryResponse", this.handleQueryResponse);
     this.yasqe.on("totalElementChanged", this.handleTotalElementChanged);
+    this.yasqe.on("openNewTab", this.handleOpenNewTab);
+    this.yasqe.on("openNextTab", this.handleOpenNextTab);
+    this.yasqe.on("openPreviousTab", this.handleOpenPreviousTab);
+    this.yasqe.on("closeOtherTabs", this.handlerCloseOtherTabs);
   }
   private destroyYasqe() {
     // As Yasqe extends of CM instead of eventEmitter, it doesn't expose the removeAllListeners function, so we should unregister all events manually
@@ -389,10 +397,30 @@
     this.yasqe?.off("autocompletionClose", this.handleAutocompletionClose);
     this.yasqe?.off("queryResponse", this.handleQueryResponse);
     this.yasqe?.off("totalElementChanged", this.handleTotalElementChanged);
+    this.yasqe?.off("openNewTab", this.handleOpenNewTab);
+    this.yasqe?.off("openNextTab", this.handleOpenNextTab);
+    this.yasqe?.on("openPreviousTab", this.handleOpenPreviousTab);
+    this.yasqe?.on("closeOtherTabs", this.handlerCloseOtherTabs);
     this.yasqe?.destroy();
     this.yasqe = undefined;
   }
 
+  handleOpenNewTab = () => {
+    this.emit("openNewTab", this);
+  };
+
+  handleOpenNextTab = () => {
+    this.emit("openNextTab", this);
+  };
+
+  handleOpenPreviousTab = () => {
+    this.emit("openPreviousTab", this);
+  };
+
+  handlerCloseOtherTabs = () => {
+    this.emit("closeOtherTabs", this);
+  };
+
   handleYasqeBlur = (yasqe: Yasqe) => {
     this.updatePersistJson(yasqe);
     this.emit("change", this, this.persistentJson);
Index: Yasgui/packages/yasgui/src/TabContextMenu.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Yasgui/packages/yasgui/src/TabContextMenu.ts b/Yasgui/packages/yasgui/src/TabContextMenu.ts
--- a/Yasgui/packages/yasgui/src/TabContextMenu.ts	(revision b3422210856f03bf3959752efe335b1ee69a4347)
+++ b/Yasgui/packages/yasgui/src/TabContextMenu.ts	(revision b21a32fbd0e38bda84e15fb38c5f07981b944bd9)
@@ -1,6 +1,5 @@
 import { addClass } from "@triply/yasgui-utils";
 import { default as Yasgui, getRandomId } from "./";
-import Tab from "./Tab";
 import { TabListEl } from "./TabElements";
 import { cloneDeep } from "lodash-es";
 require("./TabContextMenu.scss");
@@ -125,9 +124,7 @@
       addClass(this.closeOtherTabsEl, "disabled");
     } else {
       this.closeOtherTabsEl.onclick = () => {
-        for (const tabId of Object.keys(this.yasgui._tabs)) {
-          if (tabId !== currentTabId) (this.yasgui.getTab(tabId) as Tab).close();
-        }
+        this.yasgui.closeOtherTabs(currentTabId);
       };
     }
     if (this.yasgui.persistentConfig && this.yasgui.persistentConfig.hasLastClosedTab()) {
Index: Yasgui/packages/yasgui/src/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Yasgui/packages/yasgui/src/index.ts b/Yasgui/packages/yasgui/src/index.ts
--- a/Yasgui/packages/yasgui/src/index.ts	(revision b3422210856f03bf3959752efe335b1ee69a4347)
+++ b/Yasgui/packages/yasgui/src/index.ts	(revision b21a32fbd0e38bda84e15fb38c5f07981b944bd9)
@@ -232,6 +232,13 @@
     }
     return tab;
   }
+  public closeOtherTabs(currentTabId: string): void {
+    for (const tabId of Object.keys(this._tabs)) {
+      if (tabId !== currentTabId) {
+        this.getTab(tabId)?.close();
+      }
+    }
+  }
   /**
    * Checks if two persistent tab configuration are the same based.
    * It isnt a strict equality, as falsy values (e.g. a header that isnt set in one tabjson) isnt taken into consideration
@@ -288,12 +295,43 @@
       this.emit("yasqeReady", tab, tab.getYasqe());
     });
     tab.on("yasqeReady", (tab, yasqe) => this.emit("yasqeReady", tab, yasqe));
+    tab.on("openNewTab", (tab) => this.addTab(true));
+    tab.on("openNextTab", (tab: Tab) => this.openNextTab(tab));
+    tab.on("openPreviousTab", (tab: Tab) => this.openPreviousTab(tab));
+    tab.on("closeOtherTabs", (tab) => this.closeOtherTabs(tab.getId()));
     tab.on("query", (tab) => this.emit("query", this, tab));
     tab.on("queryAbort", (tab) => this.emit("queryAbort", this, tab));
     tab.on("queryResponse", (tab) => this.emit("queryResponse", this, tab));
     tab.on("autocompletionShown", (tab, widget) => this.emit("autocompletionShown", this, tab, widget));
     tab.on("autocompletionClose", (tab) => this.emit("autocompletionClose", this, tab));
   }
+
+  public openNextTab(tab: Tab) {
+    const nextTabId = this.getNextTabId(tab);
+    if (nextTabId) {
+      this.selectTabId(nextTabId);
+    }
+  }
+
+  public openPreviousTab(tab: Tab) {
+    const nextTabId = this.getPreviousTabId(tab);
+    if (nextTabId) {
+      this.selectTabId(nextTabId);
+    }
+  }
+
+  public getNextTabId(tab: Tab): string | undefined {
+    const allTabsIds = Object.keys(this._tabs);
+    const nextIndex = allTabsIds.indexOf(tab.getId()) + 1;
+    return allTabsIds[nextIndex];
+  }
+
+  public getPreviousTabId(tab: Tab): string | undefined {
+    const allTabsIds = Object.keys(this._tabs);
+    const nextIndex = allTabsIds.indexOf(tab.getId()) - 1;
+    return allTabsIds[nextIndex];
+  }
+
   public _setPanel(panelId: string, panel: HTMLDivElement) {
     for (const id in this._tabs) {
       if (id !== panelId) this._tabs[id].hide();
Index: Yasgui/packages/yasqe/src/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Yasgui/packages/yasqe/src/index.ts b/Yasgui/packages/yasqe/src/index.ts
--- a/Yasgui/packages/yasqe/src/index.ts	(revision b3422210856f03bf3959752efe335b1ee69a4347)
+++ b/Yasgui/packages/yasqe/src/index.ts	(revision b21a32fbd0e38bda84e15fb38c5f07981b944bd9)
@@ -48,6 +48,14 @@
   on(eventName: "resize", handler: (instance: Yasqe, newSize: string) => void): void;
   off(eventName: "resize", handler: (instance: Yasqe, newSize: string) => void): void;
   on(eventName: string, handler: () => void): void;
+  on(eventName: "openNewTab", handler: () => void): void;
+  off(eventName: "openNewTab", handler: () => void): void;
+  on(eventName: "openNextTab", handler: () => void): void;
+  off(eventName: "openNextTab", handler: () => void): void;
+  on(eventName: "openPreviousTab", handler: () => void): void;
+  off(eventName: "openPreviousTab", handler: () => void): void;
+  on(eventName: "closeOtherTabs", handler: () => void): void;
+  off(eventName: "closeOtherTabs", handler: () => void): void;
 }
 
 export class Yasqe extends CodeMirror {
