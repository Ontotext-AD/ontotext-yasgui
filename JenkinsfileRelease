pipeline {

  parameters {
    gitParameter name: 'branch',
                 description: 'The branch to check out',
                 branchFilter: 'origin/(.*)',
                 defaultValue: 'main',
                 selectedValue: 'DEFAULT',
                 type: 'PT_BRANCH',
                 listSize: '0',
                 quickFilterEnabled: true

    string name: 'ReleaseVersion',
           description: 'Version to release',
           defaultValue: ''

    text name: 'ReleaseDescription',
           description: 'Release description',
           defaultValue: ''

    booleanParam name: 'PreRelease',
           description: 'This is a pre-release. Will not publish to npm if selected ',
           defaultValue: true

    string name: 'auth',
           description: 'Jenkins credential ID'
  }

  agent {
    label 'graphdb-jenkins-node'
  }

  tools {
    nodejs 'nodejs-14.17.0'
  }

  options {
    disableConcurrentBuilds()
    timeout(time: 15, unit: 'MINUTES')
    timestamps()
  }

  environment {
    NPM_TOKEN = credentials('npm-token')
    API_URL = "https://github.com/Ontotext-AD/ontotext-yasgui.git"
    AUTH = credentials("${auth}")
  }

  stages {
    stage ('Checkout branch') {
        steps {
            sh "git checkout ${branch}"
        }
    }
    stage ('Update version') {
        steps {
          script {
            if (params.PreRelease == false) {
              sh 'npm run version-all ${ReleaseVersion}'
            }
          }
        }
    }
    stage ("Installing ontotext-yasgui") {
        steps {
            sh 'npm install yarn'
            sh 'npm install'
        }
    }
    stage ("Building ontotext-yasgui") {
        steps {
            sh "npm run build"
        }
    }

    stage ('Publishing ontotext-yasgui') {
      steps {
        // Publish on npm
        script {
          if (params.PreRelease == false) {
            sh 'npm run publish ${NPM_TOKEN}'
          }
        }
      }
    }
  }

  post {
    success {
         script {
            if (params.PreRelease == false) {
              // Commit, tag and push the changes in Git
               sh "git commit -a -m 'Release ${ReleaseVersion}'"
               sh "git tag -a v${ReleaseVersion} -m 'Release v${ReleaseVersion}'"
               sh "git push --set-upstream origin ${branch} && git push --tags"
            }
        }
    }

    failure {
      wrap([$class: 'BuildUser']) {
        emailext(
          to: env.BUILD_USER_EMAIL,
          from: "Jenkins <hudson@ontotext.com>",
          subject: '''[Jenkins] $PROJECT_NAME - Build #$BUILD_NUMBER - $BUILD_STATUS!''',
          mimeType: 'text/html',
          body: '''${SCRIPT, template="groovy-html.template"}'''
        )
      }
    }

    always {
      sh "rm -f .npmrc"
    }
  }
}
